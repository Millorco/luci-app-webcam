#!/bin/sh

# Percorso del file JSON di output
OUTPUT_FILE="/www/webcam_options.json" # O un'altra posizione accessibile al server web

# Funzione per estrarre le opzioni da un campo di gphoto2 --get-config
# Argomenti:
#   $1: Il nome della configurazione (es. "iso", "imageformat")
#   $2: La riga che contiene le "Choices:"
#   $3: Il nome della chiave nel JSON (es. "iso_options", "imageformat_options")
extract_options() {
    local config_name="$1"
    local choices_line="$2"
    local json_key="$3"
    local options_array=""
    local counter=0

    # Estrae le opzioni individuali separate da virgola
    # Rimuove il prefisso "Choices: "
    choices=$(echo "$choices_line" | sed 's/^Choices: //')

    # Divide le opzioni e le formatta per il JSON
    IFS=',' read -ra ADDR <<< "$choices"
    for i in "${ADDR[@]}"; do
        # Rimuovi spazi bianchi iniziali/finali
        option=$(echo "$i" | xargs)
        # Alcune opzioni gphoto2 potrebbero avere un "string: ", "int: ", "float: " prefisso, rimuovilo
        option=$(echo "$option" | sed 's/^string: //')
        option=$(echo "$option' | sed 's/^int: //')
        option=$(echo "$option" | sed 's/^float: //')

        # Usiamo l'opzione stessa come valore e etichetta per semplicità.
        # Per esposizione e velocità di scatto, gphoto2 spesso fornisce stringhe leggibili
        # come "-2.0", "1/100", "Auto".
        options_array="${options_array},[\"$option\", \"$option\"]"
        counter=$((counter + 1))
    done

    # Rimuovi la prima virgola extra
    options_array=$(echo "$options_array" | sed 's/^,//')

    # Aggiungi al file JSON temporaneo
    echo "    \"$json_key\": [" >> "$TEMP_JSON_FILE"
    echo "$options_array" >> "$TEMP_JSON_FILE"
    echo "    ]," >> "$TEMP_JSON_FILE"
}

# --- Inizio dello script ---

# Creare un file JSON temporaneo
TEMP_JSON_FILE=$(mktemp)

echo "{" > "$TEMP_JSON_FILE"

# --- Processa la configurazione 'iso' ---
GPHOTO_ISO_OUTPUT=$(gphoto2 --get-config iso 2>&1)
if echo "$GPHOTO_ISO_OUTPUT" | grep -q "Label: ISO"; then
    ISO_CHOICES_LINE=$(echo "$GPHOTO_ISO_OUTPUT" | grep "Choices:")
    if [ -n "$ISO_CHOICES_LINE" ]; then
        extract_options "iso" "$ISO_CHOICES_LINE" "iso_options"
    else
        echo "    \"iso_options\": []," >> "$TEMP_JSON_FILE" # Nessuna scelta trovata
    fi
else
    echo "    \"iso_options\": []," >> "$TEMP_JSON_FILE" # Configurazione ISO non trovata o errore
fi

# --- Processa la configurazione 'exposurecompensation' ---
GPHOTO_EXPOSURE_OUTPUT=$(gphoto2 --get-config exposurecompensation 2>&1)
if echo "$GPHOTO_EXPOSURE_OUTPUT" | grep -q "Label: Exposure Compensation"; then
    EXPOSURE_CHOICES_LINE=$(echo "$GPHOTO_EXPOSURE_OUTPUT" | grep "Choices:")
    if [ -n "$EXPOSURE_CHOICES_LINE" ]; then
        # Aggiungi una virgola se non è la prima opzione (se iso è già stato aggiunto)
        # Questo è un po' grezzo; una gestione più robusta sarebbe quella di costruire un array e poi stamparlo una volta.
        # Per ora, presupponiamo che l'ordine sia sempre lo stesso.
        echo "," >> "$TEMP_JSON_FILE"
        extract_options "exposurecompensation" "$EXPOSURE_CHOICES_LINE" "exposure_options"
    else
        echo "," >> "$TEMP_JSON_FILE" # Aggiungi la virgola se non la prima e non ha scelte
        echo "    \"exposure_options\": []," >> "$TEMP_JSON_FILE"
    fi
else
    echo "," >> "$TEMP_JSON_FILE" # Aggiungi la virgola se non la prima e la configurazione non è stata trovata
    echo "    \"exposure_options\": []," >> "$TEMP_JSON_FILE"
fi

# --- Processa la configurazione 'shutterspeed' ---
GPHOTO_SHUTTER_OUTPUT=$(gphoto2 --get-config shutterspeed 2>&1)
if echo "$GPHOTO_SHUTTER_OUTPUT" | grep -q "Label: Shutter Speed"; then
    SHUTTER_CHOICES_LINE=$(echo "$GPHOTO_SHUTTER_OUTPUT" | grep "Choices:")
    if [ -n "$SHUTTER_CHOICES_LINE" ]; then
        echo "," >> "$TEMP_JSON_FILE" # Aggiungi virgola
        extract_options "shutterspeed" "$SHUTTER_CHOICES_LINE" "shutterspeed_options"
    else
        echo "," >> "$TEMP_JSON_FILE" # Aggiungi virgola
        echo "    \"shutterspeed_options\": []," >> "$TEMP_JSON_FILE"
    fi
else
    echo "," >> "$TEMP_JSON_FILE" # Aggiungi virgola
    echo "    \"shutterspeed_options\": []," >> "$TEMP_JSON_FILE"
fi

# Rimuovi l'ultima virgola dall'ultimo blocco se ci sono più opzioni
sed -i '$ s/,$//' "$TEMP_JSON_FILE"

echo "}" >> "$TEMP_JSON_FILE"

# Sposta il file temporaneo nella destinazione finale
mv "$TEMP_JSON_FILE" "$OUTPUT_FILE"
chmod 644 "$OUTPUT_FILE" # Imposta i permessi corretti

echo "File JSON generato in: $OUTPUT_FILE"
